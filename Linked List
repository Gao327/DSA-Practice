#ifndef LINKED_LIST_H
#define LINKED_LIST_H
#include <initializer_list>
#include <string>
template <typename T> struct Node {
  T element;
  Node<T> *next;
  Node(T element) : element{element}, next{nullptr} {}
  Node(T element, Node<T> *next) : element{element}, next{next} {}
};
template<typename T>
std::string convert(const T& element) {
    std::ostringstream oss;
    oss << element;
    return oss.str();
}
template<>
std::string convert<std::string>(const std::string& element) {
    return "\"" + element + "\"";
}
template <typename T> class List {
private:
  size_t m_size;
  Node<T> *m_head;
  // Feel free to add helper functions here, if necessary
public:
  // Constructs an empty container
  List() : m_size{0}, m_head{nullptr} {}
  // Constructs the container with the contents of the initializer list
  List(std::initializer_list<T> init_list) : m_size{0}, m_head{nullptr} {
    auto it = init_list.end();
    while (--it != init_list.begin()) {
      push_head(*it);
    }
    push_head(*it);
  }
  
  // Destructor
  ~List() {
    // TODO: (Optional) Implement this method
      while (m_head != nullptr)
      {
          Node<T>* temp = m_head;
          m_head = m_head->next;
          delete temp;
          m_size--;
      }
  }
  // Copy constructor
  List(const List<T> &other) {
      Node<T>* current = other.headAddress();
      Node<T>* prev = nullptr;
      while (current)
      {
          Node<T>* newNode = new Node<T>;
          newNode->element = current->element;
          newNode->next = current->next;
          if (prev)
          {
              prev->next = newNode;
          }
          else
          {
              prev = newNode;
              m_head = prev;
          }
          current = current->next;
          m_size = other.size();
      }
      
  }
  // Copy assignment
  List<T> &operator=(const List<T> &other) {
      // Clear original List
      while (m_head != nullptr)
      {
          Node<T>* temp = m_head;
          m_head = m_head->next;
          delete temp;
          m_size--;
      }
      Node<T>* current = other.headAddress();
      Node<T>* prev = nullptr;
      while (current)
      {
          Node<T>* newNode = new Node<T>;
          newNode->element = current->element;
          newNode->next = current->next;
          if (prev)
          {
              prev->next = newNode;
          }
          else
          {
              prev = newNode;
              m_head = prev;
          }
          current = current->next;
          m_size = other.size();
      }
      return *this;
    
    
  }
  // Returns the contents of the head node
  const T& head() {
    if (m_size <= 0) {
      throw std::out_of_range("List is empty");
    }
    return m_head->element;
  }
  Node<T>* headAddress() { return m_head; }
  // Checks whether the container is empty
  bool empty() const { return m_size == 0; }
  // Returns the number of elements
  size_t size() const { return m_size; }
  // Inserts an element to the head
  void push_head(const T& element) {
    Node<T> *node = new Node<T>{element, m_head};
    m_head = node;
    m_size++;
  }
  // Removes the head element
  void pop_head() {
    if (m_size <= 0) {
      throw std::out_of_range("List is empty");
    }
    Node<T> *node = m_head;
    m_head = m_head->next;
    delete node;
    m_size--;
  }
  // Checks whether the container contains the specified element
  bool contains(const T& element) const {
    // TODO: Implement this method
     
      Node<T>* temp = m_head;
      while (temp!=nullptr)
      {
          if (temp->element == element)
          {
              return true;
          }
         
          temp = temp->next;
      }
     
    return false;
  }
  // Extracts the maximum element from the container
  T extract_max() {
    if (empty()) {
        throw std::out_of_range("List is empty");
    }
    Node<T>* currentMax = m_head;
    Node<T>* temp = m_head->next; 
    Node<T>* beforeMax = nullptr; 
    Node<T>* beforeTemp = m_head; 
    while (temp) {
        if (currentMax->element < temp->element) {
            beforeMax = beforeTemp;
            currentMax = temp;
        }
        beforeTemp = temp;
        temp = temp->next;
    }
    T value = currentMax->element;
    if (currentMax == m_head) { 
        m_head = m_head->next;
    }
    else {
        beforeMax->next = currentMax->next; 
    }
    delete currentMax;
    m_size--; 
    return value;
}
  // Reverse the container
  void reverse() {
      // TODO: Implement this method
      if (m_head == nullptr) return; 
      Node<T>* storage = m_head;
      Node<T>* tail = nullptr;
      while (storage != nullptr) {
          Node<T>* newNode = new Node<T>(storage->element, tail);
          
          tail = newNode;
          Node<T>* temp = storage;
          storage = storage->next;
          delete temp;
      }
      m_head = tail;
  }
  // Returns a std::string equivalent of the container
std::string to_string() const {
    std::ostringstream oss;
    Node<T>* current = m_head;
    oss << "{";
    while (current != nullptr) {
        oss << convert(current->element);
        current = current->next;
        if (current != nullptr) {
            oss << ", "; 
        }
    }
    oss << "}";
    return oss.str();
}
};
#endif
