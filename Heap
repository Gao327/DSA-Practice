#pragma once
#include <math.h>

#include <iostream>
using namespace std;

#ifndef HEAPHPP
#define HEAPHPP

#define DEFAULTHEAPSIZE 1023

template <class T>
class Heap {
 protected:
  T* _heap;
  int _size;

 public:
  Heap() {
      _heap = new T[DEFAULTHEAPSIZE];
      _size = 0;
  }

  int size() const {
      return _size;
  }
  void bubble_up(int pos);
  void bubble_down(int pos);
  bool empty() const {
    // TODO: implement this
      if (_size == 0)
          return true;
      return false;
  }
  void insert(const T&);
  T extractMax();
  T peekMax() const;
  void printHeapArray() const;
  void printTree() const;
  void changeKey(const T& from, const T& to);
  void deleteItem(const T&);
  void swap(T* v, T* parent);
  T* parent(int pos)
  {
        return &_heap[(pos - 1) / 2];
  }
  int search(int pos, const T& element) {
      if (pos >= _size) {
          return -1; // Element not found
      }
      if (_heap[pos] == element) {
          return pos;
      }
      int left = search(2 * pos + 1, element);
      if (left != -1) {
          return left; // Element found in left subtree
      }
      return search(2 * pos + 2, element); // Search in right subtree
  }



  ~Heap() { delete[] _heap; };
};
template <class T>
void Heap<T>::bubble_down(int pos) {
    while (pos < _size) {
        int left = 2 * pos + 1;
        int right = 2 * pos + 2;
        int biggerpos = pos;
        if (left < _size && _heap[left] > _heap[biggerpos]) {
            biggerpos = left;
        }
        if (right < _size && _heap[right] > _heap[biggerpos]) {
            biggerpos = right;
        }
        if (biggerpos == pos) {
            return;
        }
        swap(&_heap[biggerpos], &_heap[pos]);
        pos = biggerpos;
    }
}
template <class T>
void Heap<T>::swap(T* v, T* parent) {
    T temp = *v;
    *v = *parent;
    *parent = temp;
}
template <class T>
void Heap<T>::bubble_up(int pos) {
    while (pos > 0 && _heap[pos] > *parent(pos)) {
        swap(&_heap[pos], parent(pos));
        pos = (pos - 1) / 2;
    }
}
template <class T>
void Heap<T>::insert(const T& item) {
  // TODO: implement this
    int pos = _size; // size() directly gives the empty position.
    _heap[pos] = item;
    bubble_up(pos);
    _size++;

}

template <class T>
T Heap<T>::extractMax() {
  // TODO: implement this
    int end = _size - 1;
    if (_size == 0)
    {
        throw std::out_of_range("heap is empty");
    }
    T tmp = _heap[0];
    _heap[0] = _heap[end];
   // _heap[end] = _heap[_size];
    
    bubble_down(0);
    _size--;
    return tmp;
}

template <class T>
T Heap<T>::peekMax() const {
  // TODO: What happens if the heap is empty?
    if (empty()) {
        throw std::out_of_range("heap is empty");
  }
  return _heap[0];
};

template <class T>
void Heap<T>::printHeapArray() const {
  for (int i = 0; i < size(); i++) {
    cout << _heap[i] << " ";
  }
  cout << endl;
}

template <class T>
void Heap<T>::changeKey(const T& from, const T& to) {
  // TODO: implement this
    if (from == to)
    {
        return;
    }
    int pos = search(0,from);
    if (pos == -1)
    {
        throw std::out_of_range("not found");
    }
    _heap[pos] = to;
    if (from > to)
    {
        bubble_down(pos);
    }
    else
    {
        bubble_up(pos);
    }
}

template <class T>
void Heap<T>::deleteItem(const T& x) {
    int end = size() - 1; // pos of last item.
    if (_size == 0)
    {
        throw std::out_of_range("not found1");
    }
    int pos = search(0,x);
    if (pos == -1)
    {
        throw std::out_of_range("not found");
    }
    _heap[pos] = _heap[end];
   // _heap[end] = _heap[_size];
    if (pos > 0 && _heap[pos] > *parent(pos)) {
        bubble_up(pos);
    }
    else {
        bubble_down(pos);
    }
    _size--;
}


template <class T>
void Heap<T>::printTree() const {
  int parity = 0;
  if (size() == 0) return;
  int space = pow(2, 1 + (int)log2f(size())), i;
  int nLevel = (int)log2f(size()) + 1;
  int index = 0, endIndex;
  int tempIndex;

  for (int l = 0; l < nLevel; l++) {
    index = 1;
    parity = 0;
    for (i = 0; i < l; i++) index *= 2;
    endIndex = index * 2 - 1;
    index--;
    tempIndex = index;
    while (index < size() && index < endIndex) {
      for (i = 0; i < space - 1; i++) cout << " ";
      if (index == 0)
        cout << "|";
      else if (parity)
        cout << "\\";
      else
        cout << "/";
      parity = !parity;
      for (i = 0; i < space; i++) cout << " ";
      index++;
    }
    cout << endl;
    index = tempIndex;
    while (index < size() && index < endIndex) {
      for (i = 0; i < (space - 1 - ((int)log10(_heap[index]))); i++)
        cout << " ";
      cout << _heap[index];
      for (i = 0; i < space; i++) cout << " ";
      index++;
    }

    cout << endl;
    space /= 2;
  }
}

#endif
