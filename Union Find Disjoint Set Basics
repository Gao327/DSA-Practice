// Quick-Find: Find: O(1), Union: O(n) worst. Tree Flat
union(int p, int q){
  for(int i = 0; i < Id.size; i++)
  {
    if(Id[i] == Id[q])
    {
      Id[i] == Id[p];
    }
  }
}
// now both p and q has the same Id. 
find(int p, int q)
{
  return (Id[p] == Id[q]);
}


// Quick Union: Find: O(n), Union: O(n) worst Tree tall
find(int p, int q) // Check if two have the same ancester
{
  while(parent[p] != p) p = parent[p];
  while(parent[q] != q) q = parent[q];
  return (p==q);
}
union(int p, int q)
{
  while(parent[p] != p) p = parent[p];
  while(parent[q] != q) q = parent[q];
  parent[p] = q;


// Above are very slow.
// Below are ways to optimise.
// Before that, we add in parents for each elements in the virtual tree. If two elements shares the
// same ancester, they are in the same disjoint set.

// Find() with path compression O(log n) avg
// Finding representative (ancester)
int find(int i) 
{
  root = p;
  while (parent[root] != root) root = parent[root];
  while (parent[p] != p) {
    temp = parent[p];
    parent[p] = root;
    p = temp;
  }
  return root;
}
// Union by size (weighted union), find and union: O(log n)
// one more int[] for size is used
void union(int p, int q)
{
  int rp = find(p); //ancester for p.
  int rq = find(q);
  if(rp == rq) return; //Already in the same union
  if(size[rp] > size[rq]) // Smaller tree added to the larger one
  {
    parent[rq] = rp;
    size[rq] += size[rp];
  }
  else
  {
    parent[rp] = rq;
    size[rp] += size[rq];
  }
}
// weighted-union with path-compression Î±(m, n) for both find and union. 

