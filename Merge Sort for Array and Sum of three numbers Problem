/* 
  find number of three number sets of which the sum == total.
*/

void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int m = mid - left + 1;
    int n = right - mid;

    // Create temp arrays
    int* L = new int[m];
    int* R = new int[n];

    // Copy data to temp arrays L[] and R[]
    for (i = 0; i < m; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n; j++)
        R[j] = arr[mid + 1 + j];

    // Merge the temp arrays back into arr[left..right]
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = left; // Initial index of merged subarray
    while (i < m && j < n) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < m) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        // Same as (left+right)/2, but avoids overflow for large left and right
        int mid = left + (right - left) / 2;

        // Sort first and second halves
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}


int n3Sum(int* arr, int size, int total)
{
    mergeSort(arr, 0, size - 1);
    int count = 0;
    for (int i = 0; i < size - 2; i++) {
        int left = i + 1, right = size - 1;
        while (left < right) {
            int sum = arr[i] + arr[left] + arr[right];
            if (sum == total) {
                count++;
                left++;
                right--;
            }
            else if (sum < total) {
                left++;
            }
            else {
                right--;
            }
        }
    }
    return count;
}
